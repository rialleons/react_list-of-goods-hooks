{"version":3,"sources":["types/SortType.ts","types/ReverseType.ts","App.tsx","index.tsx"],"names":["SortType","ReverseType","goodsFromServer","App","useState","Default","sortParameter","setSortParameter","Straight","reverseParameter","setReverseParameter","visibleGoods","goods","sortedGoods","sort","good1","good2","Length","length","Alphabet","localeCompare","Reverse","reverse","getSortedGoods","className","onClick","type","cn","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAAYA,ECAAC,E,2EDAAD,K,WAAAA,E,oBAAAA,E,iBAAAA,M,cCAAC,K,oBAAAA,E,mBAAAA,M,gBCQCC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAgCK,IAAMC,EAAgB,WAC3B,MAA0CC,mBAASJ,EAASK,SAA5D,mBAAOC,EAAP,KAAsBC,EAAtB,KACA,EACEH,mBAASH,EAAYO,UADvB,mBAAOC,EAAP,KAAyBC,EAAzB,KAGMC,EAlCR,SACEC,EACAN,EACAG,GAEA,IAAMI,EAAW,YAAOD,GAqBxB,OAnBIN,GACFO,EAAYC,MAAK,SAACC,EAAOC,GACvB,OAAQV,GACN,KAAKN,EAASiB,OACZ,OAAOF,EAAMG,OAASF,EAAME,OAE9B,KAAKlB,EAASmB,SACZ,OAAOJ,EAAMK,cAAcJ,GAE7B,QACE,OAAO,MAKXP,IAAqBR,EAAYoB,SACnCR,EAAYS,UAGPT,EASLU,CAAerB,EAAiBI,EAAeG,GAGjD,OACE,sBAAKe,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,QAAS,kBAAMlB,EAAiBP,EAASmB,WACzCO,KAAK,SACLF,UAAWG,IAAG,SAAU,UAAW,CACjC,WAAYrB,IAAkBN,EAASmB,WAJ3C,iCAUA,wBACEM,QAAS,kBAAMlB,EAAiBP,EAASiB,SACzCS,KAAK,SACLF,UAAWG,IAAG,SAAU,aAAc,CACpC,WAAYrB,IAAkBN,EAASiB,SAJ3C,4BAUA,wBACEQ,QAAS,WACHhB,IAAqBR,EAAYO,SACnCE,EAAoBT,EAAYoB,SAEhCX,EAAoBT,EAAYO,WAGpCkB,KAAK,SACLF,UAAWG,IAAG,SAAU,aAAc,CACpC,WAAYlB,IAAqBR,EAAYoB,UAVjD,sBAgBoB,KAAlBf,GACGG,IAAqBR,EAAYO,WACpC,wBACEiB,QAAS,WACPf,EAAoBT,EAAYO,UAChCD,EAAiBP,EAASK,UAE5BqB,KAAK,SACLF,UAAU,4BANZ,sBAaJ,6BACGb,EAAaiB,KAAI,SAAAC,GAAI,OACpB,oBAAI,UAAQ,OAAZ,SACGA,GADqBA,YChHlCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.3a67cd86.chunk.js","sourcesContent":["export enum SortType {\n  Default = '',\n  Alphabet = 'alphabet',\n  Length = 'length',\n}\n","export enum ReverseType {\n  Straight = 'straight',\n  Reverse = 'reverse',\n}\n","import React, { useState } from 'react';\nimport cn from 'classnames';\n\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport { SortType } from './types/SortType';\nimport { ReverseType } from './types/ReverseType';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nfunction getSortedGoods(\n  goods: string[],\n  sortParameter: SortType,\n  reverseParameter: ReverseType,\n) {\n  const sortedGoods = [...goods];\n\n  if (sortParameter) {\n    sortedGoods.sort((good1, good2) => {\n      switch (sortParameter) {\n        case SortType.Length:\n          return good1.length - good2.length;\n\n        case SortType.Alphabet:\n          return good1.localeCompare(good2);\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (reverseParameter === ReverseType.Reverse) {\n    sortedGoods.reverse();\n  }\n\n  return sortedGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortParameter, setSortParameter] = useState(SortType.Default);\n  const [reverseParameter, setReverseParameter] = (\n    useState(ReverseType.Straight)\n  );\n  const visibleGoods = (\n    getSortedGoods(goodsFromServer, sortParameter, reverseParameter)\n  );\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          onClick={() => setSortParameter(SortType.Alphabet)}\n          type=\"button\"\n          className={cn('button', 'is-info', {\n            'is-light': sortParameter !== SortType.Alphabet,\n          })}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          onClick={() => setSortParameter(SortType.Length)}\n          type=\"button\"\n          className={cn('button', 'is-success', {\n            'is-light': sortParameter !== SortType.Length,\n          })}\n        >\n          Sort by length\n        </button>\n\n        <button\n          onClick={() => {\n            if (reverseParameter === ReverseType.Straight) {\n              setReverseParameter(ReverseType.Reverse);\n            } else {\n              setReverseParameter(ReverseType.Straight);\n            }\n          }}\n          type=\"button\"\n          className={cn('button', 'is-warning', {\n            'is-light': reverseParameter !== ReverseType.Reverse,\n          })}\n        >\n          Reverse\n        </button>\n\n        {(sortParameter !== ''\n          || reverseParameter !== ReverseType.Straight) && (\n          <button\n            onClick={() => {\n              setReverseParameter(ReverseType.Straight);\n              setSortParameter(SortType.Default);\n            }}\n            type=\"button\"\n            className=\"button is-danger is-light\"\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {visibleGoods.map(good => (\n          <li data-cy=\"Good\" key={good}>\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}